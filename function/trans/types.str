module function/trans/types

imports 
  include/WebDSL
  function/trans/signatures
  lib/nbl/-
  lib/task/-
  lib/types/-
  lib/editor-common.generated
 
rules // printing error messages
  	
  /*
  type-error:
  	//Task(_, [], Choice(results,error), _) -> (node, message)
  	Error(error) -> (error, message)
    where message := <map(is-string <+ pp-webdsl-string); concat-strings <+ !"default error message"> error

  type-error:
  	t@PropCheck(current, expected*) -> (t, <type-error-message-after-eval> (current,expected*))
	*/

	pp-type-message:
		(t, message) -> (t, <flatten-list; map(is-string <+ pp-webdsl-string); concat-strings <+ !"default error message"> message)

  type-error-message-after-eval :
  	(current, expected*) -> $[Type error found: [<pp-webdsl-string> current], expected: [<map(pp-webdsl-string);concat-strings> expected*]]

rules // checking

  type-error-message-before-eval :
  	(current, expected*) -> ["Type error found: ", current, ", expected: ", expected*]
	
  create-type(|partition) : 
  	type -> <new-task(|partition)> PropCalc(type, ()) // only need second argument (list of dependencies) if type tasks are used in the calculation but not contained in end result 
 
  type-check(|partition, origin) :
    (current, expected*) -> <task-create-message-on-failure(|partition, task)> message
    with
    	check*   := <map(create-check-task(|current, partition))> expected*;
    	task     := <new-task(|partition)> Choice(check*);
    	message  := <origin-track-forced(<type-error-message-before-eval; task-error-message> (current, expected*))> origin
    
  create-check-task(|current, partition) : 
  	expected -> <new-task(|partition)> PropCheck(current, expected)
    
  check-is-bool(|partition) : e -> <type-check(|partition, e)> (<type-of-task(|partition)> e, [SimpleSort("Bool")])
  check-is-int(|partition) : e -> <type-check(|partition, e)> (<type-of-task(|partition)> e, [SimpleSort("Int")])
  
  resolve-type(|partition) :
  	x -> <new-task(|partition)> PropLookup(Type(), x)  

rules // type helpers
    
  set-of  : 
  	type -> GenericSort("Set",[type])
  	
  list-of : 
  	type -> GenericSort("List",[type]) 

rules // literals

	type-of-task(|partition): list -> <new-task(|partition)> Concat(<map(type-of-task(|partition))> list)

  type-of-task(|partition): String(_) -> <create-type(|partition)> SimpleSort("String")
  type-of-task(|partition): Int(_)    -> <create-type(|partition)> SimpleSort("Int")
  type-of-task(|partition): Float(_)  -> <create-type(|partition)> SimpleSort("Float")
  type-of-task(|partition): True()    -> <create-type(|partition)> SimpleSort("Bool")
  type-of-task(|partition): False()   -> <create-type(|partition)> SimpleSort("Bool") 

rules // definitions
	
	type-of-task(|partition):
		Arg(_, t) -> <create-type(|partition)> t
  
rules // statements  		
  		
  type-of-task(|partition):
    If(e, b1, b2) -> <id>
    where <check-is-bool(|partition)> e

  type-of-task(|partition):
    ForStmt(x, t, e, _, _) -> <id>
    where <type-check(|partition, e)> (<type-of-task(|partition)> e, [<set-of> t, <list-of> t])
  
  type-of-task(|partition):  
    ForCountStmt(_, e1, e2, _) -> <id>
    where <check-is-int(|partition)> e1
    where <check-is-int(|partition)> e2

rules // expressions  	
	 
  type-of-task(|partition): 
  	Var(x) -> <resolve-type(|partition)> x
  
  type-of-task(|partition): 
  	Call(_, x, _) -> <resolve-type(|partition)> x

  type-of-task(|partition): 
  	ThisCall(x, _) -> <resolve-type(|partition)> x	 
	 
  type-of-task(|partition): 
  	Not(e) -> <create-type(|partition)> SimpleSort("Bool")
  	where <check-is-bool(|partition)> e

  type-of-task(|partition):
    t@IfExp(e, e1, e2) -> e1t
    where <check-is-bool(|partition)> e
    where e1t := <type-of-task(|partition)> e1
        ; e2t := <type-of-task(|partition)> e2
        ; <type-check(|partition, t)> (e2t, [e1t]) // or subtype of e1t
          
  type-of-task(|partition):
  	t@ForExp(e, _, srt, ecol, _) -> <create-type(|partition)> <list-of> et
    where ecolt := <type-of-task(|partition)> ecol
        ; <type-check(|partition, t)> (ecolt, [<set-of> srt, <list-of> srt])
    where et := <type-of-task(|partition)> e
  
  type-of-task(|partition):
  	t@AndForExp(e) -> <create-type(|partition)> SimpleSort("Bool")
    where et := <type-of-task(|partition)> e
        ; <type-check(|partition, t)> (et, [<set-of> SimpleSort("Bool"), <list-of> SimpleSort("Bool")])
          
  type-of-task(|partition):
  	t@OrForExp(e) -> <create-type(|partition)> SimpleSort("Bool")
    where et := <type-of-task(|partition)> e
        ; <type-check(|partition, t)> (et, [<set-of> SimpleSort("Bool"), <list-of> SimpleSort("Bool")])
          
  type-of-task(|partition):
  	t@CollectionIndex(e_col,e_index) -> <create-type(|partition)> type
    where e_colt := <type-of-task(|partition)> e_col
    	; <type-check(|partition, t)> (e_colt, [GenericSort("List", SimpleSort("TODO should match any type"))])
    where e_indext := <type-of-task(|partition)> e_index
    where <check-is-int(|partition)> e_indext
    where GenericSort(_,[type]) := e_colt
          
rules // for loop filter  
	
  type-of-task(|partition): Filter(we, _, _)           -> <check-is-bool(|partition)> we
  type-of-task(|partition): FilterNoLimit(we, _)       -> <check-is-bool(|partition)> we
  type-of-task(|partition): FilterNoOrderBy(we, _)     -> <check-is-bool(|partition)> we
  type-of-task(|partition): FilterNoOrderByNoLimit(we) -> <check-is-bool(|partition)> we

  type-of-task(|partition): Limit(lim,off)     -> <check-is-int(|partition)> lim
  type-of-task(|partition): Limit(lim,off)     -> <check-is-int(|partition)> off
  type-of-task(|partition): LimitNoOffset(lim) -> <check-is-int(|partition)> lim
  type-of-task(|partition): LimitNoLimit(off)  -> <check-is-int(|partition)> off
  