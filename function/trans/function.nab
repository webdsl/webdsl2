module function/trans/function

  author Vlad Vergu
  
  version 0.1
  status under development
   
imports
	lib/nbl/-
	lib/task/-
	include/WebDSL
	datamodel/trans/datamodel
	function/trans/hql
	
namespaces
	ModuleFunction
	ExtendedModuleFunction
	EntityFunction
	ExtendedEntityFunction
	Variable
	Type
	NativeClass
	TypeOrNativeFunction
	NativeField
	
properties
	
	kind			of EntityFunction						: FunctionKind
	kind			of ExtendedEntityFunction		: FunctionKind
	kind			of ModuleFunction						: FunctionKind
	kind			of ExtendedModuleFunction		: FunctionKind
	kind			of TypeFunction							: NativeFunctionKind
	aliasing	of TypeFunction							: QId
	aliasing	of NativeClass							: NativeClassAlias
	parent		of NativeClass							: Id
	
binding rules // function declarations
	
	EntityFunction(Function(knd, name, args, ret-ty, _)):
		scopes Variable
		defines non-unique EntityFunction name
				of type FunctionSort(args-ty, ret-ty)
				of kind knd
			where args has type args-ty
	
	EntityFunction(ExtendFunction(Function(knd, name, args, ret-ty, _))):
		scopes Variable
		defines non-unique ExtendedEntityFunction name
				of type FunctionSort(args-ty, ret-ty)
				of kind knd
			where args has type args-ty
		refers to single EntityFunction name
				of type FunctionSort(args-ty, ret-ty)
				of kind knd 
			where args has type args-ty
	
	GlobalFunction(Function(_, name, args, ret-ty, _)):
		scopes Variable
		defines non-unique ModuleFunction name
				of type FunctionSort(args-ty, ret-ty)
			where args has type args-ty
	
	GlobalFunction(ExtendFunction(Function(_, name, args, ret-ty, _))):
		scopes Variable
		defines non-unique ExtendedModuleFunction name
				of type FunctionSort(args-ty, ret-ty)
			where args has type args-ty
		refers to single ModuleFunction name of conformant type FunctionSort(args-ty, ret-ty)
			where args has type args-ty
	
	Arg(name, ty):
		defines Variable name of type ty
		
binding rules // expressions
	
	// sort reference (simple, generic, ref)
	SimpleSort(s):
		refers to Entity s
			otherwise
		refers to Enum s
			otherwise
		refers to Type s
	
	todo -- check with DG that this is fine --
	RefSort(s):
		refers to Entity s
			otherwise
		refers to Enum s
			otherwise
		refers to Type s

	todo -- test this --
	GenericSort(base, param):
		refers to Entity s
			otherwise
		refers to Type s
	
	// var declaration * 3
	VarDecl(name, ty):
		defines Variable name of type ty in subsequent scope
	
	VarDeclInit(name, ty, _):
		defines Variable name of type ty in subsequent scope
	
	VarDeclInitInferred(name, expr):
		defines Variable name of type ty in subsequent scope
			where expr has type ty
		
	// var ref
	Var(name):
		refers to Variable name
			otherwise
		refers to Property name
			otherwise
		refers to ModuleVariable name
			otherwise
		refers to Entity name
			otherwise
		refers to Type name
			otherwise
		refers to NativeClass name

	// global var ref
	GlobalVar(name):
		refers to ModuleVariable name
	
	// scope escape var ref
	ExternalScopeVar(name):
		refers to Property name
			otherwise
		refers to ModuleVariable name
	
	// function call (partial) * 3 
	ThisCall(name, args):
		refers to best EntityFunction name of conformant type FunctionSort(args-ty, _)
			where args has type args-ty 
				otherwise
		refers to best ModuleFunction name of conformant type FunctionSort(args-ty, _)
			where args has type args-ty
				otherwise
		refers to best TypeOrNativeFunction name of conformant type FunctionSort(args-ty, _)
			where args has type args-ty
	
	// PartialCall(name, args):
	// 	refers to ModuleFunction name of type FunctionSort(args-ty, _)
	// 	where args has type args-ty 
	
	Call(parent-expr, member-name, args):
		refers to best EntityFunction member-name of conformant type FunctionSort(args-ty, _) in Entity parent
			where parent-expr has type parent
			where args has type args-ty
				otherwise
		refers to best TypeFunction member-name of conformant type FunctionSort(args-ty, _) in Type parent
			where parent-expr has type parent
			where args has type args-ty
		
	Block(_):
		scopes Variable
	
	ForStmt(name, ty, _, _, block):
		defines Variable name of type ty in block
	
	ForStmtInferred(name, expr, _, block):
		defines Variable name of type ty in block
			where expr has type ty
	
	ForAllStmt(name, ty, _, block):
		defines Variable name of type ty in block
	
	ForCountStmt(name, _, _, block):
		defines Variable name of type SimpleSort("Int") in block
	
	ForExp(sexpr, name, ty, expr, filter):
		defines Variable name of type ty in sexpr, expr, filter

	FieldAccess(parent, member):
		refers to Property member in Entity parent-ty
			where parent has type parent-ty
			otherwise
		refers to NativeField member in NativeClass parent-ty
			where parent has type parent-ty

binding rules // type declarations

	TypeDef(name, _):
		scopes TypeOrNativeFunction
		defines Type name
	
	NativeClassFunction(knd, name, args-ty, r-ty):
		defines TypeOrNativeFunction name
			of type FunctionSort(args-ty, r-ty)
			of kind knd
			of aliasing None()
	
	NativeClassFunctionFromStatic(qname-fun, NativeClassFunction(knd, name, args-ty, r-ty)):
		defines TypeOrNativeFunction name
			of type FunctionSort(args-ty, r-ty)
			of kind knd
			of aliasing qname-fun
	
binding rules // native classes
	
	discuss --
		This is a hack, because assumes that all native class declarations have an alias
	-- 
	fixme --
		This currently crashes the generator
	--
	NativeClass(qname-class, NativeClassAlias(name), None(), [..., NativeClassConstructor(cargs-ty) ,...]):
		scopes TypeOrNativeFunction, NativeProperty
		defines NativeClass name
			of aliasing qname-class
		defines TypeOrNativeFunction name
			of type FunctionSort(cargs-ty, SimpleSort(name))
		
	NativeClass(qname-class, NativeClassAlias(name), NativeClassSuper(par), _):
		imports TypeOrNativeFunction from NativeClass par
		scopes TypeOrNativeFunction
		defines NativeClass name
			of parent par
			of aliasing qname-class

	NativeClassProperty(member, ty):
		defines NativeProperty member
			of type ty

binding rules // HQL queries

	// HQL queries and HQL-WebDSL boundaries
	// 



	
	// TODO: These should be handled in their respective sub-languages
	 
	// validatetemplate
	// rendertemplate
	// sendemail, email, renderemail
	// goto page
	
	
	
	
	
	
	

