module function/trans/function
 
imports
	include/WebDSL
	function/trans/signatures
	datamodel/trans/datamodel
	function/trans/hql
	
namespaces
	Function
	ExtendedFunction
	Variable
	Type
	NativeClass
	NativeProperty
	
properties
	kind			of Function									: FunctionKind // Dynamic/Static/Global
	kind			of ExtendedFunction					: FunctionKind
	kind			of TypeFunction							: NativeFunctionKind
	aliasing	of TypeFunction							: QId
	aliasing	of NativeClass							: NativeClassAlias
	parent		of NativeClass							: Id
	
binding rules // function declarations
	
	EntityFunction(Function(knd, name, args, ret-ty, _)):
		scopes Variable
		defines non-unique Function name
				of type FunctionSort(args-ty, ret-ty)
				of kind knd
			where args has type args-ty
	
	EntityFunction(ExtendFunction(Function(knd, name, args, ret-ty, _))):
		scopes Variable
		defines non-unique ExtendedFunction name
				of type FunctionSort(args-ty, ret-ty)
				of kind knd
			where args has type args-ty
		refers to single Function name
				of type FunctionSort(args-ty, ret-ty)
				of kind knd
			where args has type args-ty
	
	GlobalFunction(Function(_, name, args, ret-ty, _)):
		scopes Variable
		defines non-unique Function name
				of type FunctionSort(args-ty, ret-ty)
				of kind Global()
			where args has type args-ty
	
	GlobalFunction(ExtendFunction(Function(_, name, args, ret-ty, _))):
		scopes Variable
		defines non-unique ExtendedFunction name
				of type FunctionSort(args-ty, ret-ty)
			where args has type args-ty
		refers to single Function name
				of type FunctionSort(args-ty, ret-ty)
				of kind Global()
			where args has type args-ty
	
	Arg(name, ty):
		defines Variable name of type ty
		
binding rules // expressions
	
	// sort reference (simple, generic, ref)
	SimpleSort(s):
		refers to Entity s
			otherwise
		refers to Enum s
			otherwise
		refers to Type s
	
	RefSort(s):
		refers to Entity s
			otherwise
		refers to Enum s
			otherwise
		refers to Type s

	GenericSort(base, SimpleSort(param)):
		refers to Entity param
			otherwise
		refers to Type param
	
	// var declaration * 3
	VarDecl(name, ty):
		defines Variable name of type ty in subsequent scope
	
	VarDeclInit(name, ty, _):
		defines Variable name of type ty in subsequent scope
	
	VarDeclInitInferred(name, expr):
		defines Variable name of type ty in subsequent scope
			where expr has type ty
		
	// var ref
	Var(name):
		refers to Variable name
			otherwise
		refers to Property name
			otherwise
		refers to ModuleVariable name
			otherwise
		refers to Entity name
			otherwise
		refers to Type name
			otherwise
		refers to NativeClass name

	// global var ref
	GlobalVar(name):
		refers to ModuleVariable name
	
	// scope escape var ref
	ExternalScopeVar(name):
		refers to Property name
			otherwise
		refers to ModuleVariable name
	

	
	Block(_):
		scopes Variable
	
	ForStmt(name, ty, _, _, block):
		defines Variable name of type ty in block
	
	ForStmtInferred(name, expr, _, block):
		defines Variable name of type ty in block
			where expr has type ty
	
	ForAllStmt(name, ty, _, block):
		defines Variable name of type ty in block
	
	ForCountStmt(name, _, _, block):
		defines Variable name of type SimpleSort("Int") in block
	
	ForExp(sexpr, name, ty, expr, filter):
		defines Variable name of type ty in sexpr, expr, filter

	FieldAccess(par, member):
		refers to Property member in Entity parent-ty
			where par has type parent-ty
			otherwise
		refers to NativeProperty member in NativeClass parent-ty
			where par has type parent-ty

binding rules // type declarations

	TypeDef(name, _):
		scopes Function
		defines Type name
	
	NativeClassFunction(knd, name, args-ty, r-ty):
		defines Function name
			of type FunctionSort(args-ty, r-ty)
			of kind knd
			of aliasing None()
	
	NativeClassFunctionFromStatic(qname-fun, NativeClassFunction(knd, name, args-ty, r-ty)):
		defines Function name
			of type FunctionSort(args-ty, r-ty)
			of kind knd
			of aliasing qname-fun
	
binding rules // native classes

	NativeClass(qname-class, NativeClassAlias(name), NativeClassSuper(par), _):
		imports NativeProperty, Function from NativeClass par
		scopes NativeProperty, Function
		defines NativeClass name
			of parent par
			of aliasing qname-class

	NativeClassProperty(member, ty):
		defines NativeProperty member
			of type ty


	
	// TODO: These should be handled in their respective sub-languages:
	 
	// validatetemplate
	// rendertemplate
	// sendemail, email, renderemail
	// goto page
	
	
	
	
	
	
	

