module function/trans/function

imports
	lib/nbl/-
	include/WebDSL
	datamodel/trans/datamodel
	
namespaces
	ModuleFunction
	ExtendedModuleFunction
	EntityFunction
	ExtendedEntityFunction
	Variable
	Type
	TypeFunction
	
properties
	
	kind	of EntityFunction						: FunctionKind
	kind	of ExtendedEntityFunction		: FunctionKind
	kind	of ModuleFunction						: FunctionKind
	kind	of ExtendedModuleFunction		: FunctionKind
	
binding rules // function declarations
	
	EntityFunction(Function(knd, name, args, ret-ty, _)):
		defines non-unique EntityFunction name
			of type FunctionSort(args-ty, ret-ty)
			of kind knd
		where args has type args-ty
		scopes Variable
	
	EntityFunction(ExtendFunction(Function(_, name, args, ret-ty, _))):
		scopes Variable
		defines non-unique ExtendedEntityFunction name
			of type FunctionSort(args-ty, ret-ty)
			of kind knd
		where args has type args-ty
		refers to EntityFunction name
			of type FunctionSort(args-ty, ret-ty)
			of kind knd 
		where args has type args-ty
	
	GlobalFunction(Function(_, name, args, ret-ty, _)):
		defines non-unique ModuleFunction name
			of type FunctionSort(args-ty, ret-ty)
		where args has type args-ty
		scopes Variable
	
	GlobalFunction(ExtendFunction(Function(_, name, args, ret-ty, _))):
		defines non-unique ExtendedModuleFunction name
			of type FunctionSort(args-ty, ret-ty)
		where args has type args-ty
		scopes Variable
		refers to ModuleFunction name
	
	Arg(name, ty):
		defines Variable name of type ty
		
binding rules // expressions
	
	// sort reference (simple, generic, ref)
	SimpleSort(s):
		refers to Entity s
			otherwise
		refers to Enum s
			otherwise
		refers to Type s
	
	// TODO: refers to Base base-ty 
	// GenericSort(base-ty, param-ty):
	// 	refers to Entity param-ty
	
	RefSort(s):
		refers to Entity s // otherwise to BuiltInSorts "List" | "Set" ??
	
	// var declaration * 3
	VarDecl(name, ty):
		defines Variable name of type ty
	
	VarDeclInit(name, ty, _):
		defines Variable name of type ty
	
	VarDeclInitInferred(name, expr):
		defines Variable name of type ty
		where expr has type ty
		
	// var ref
	Var(name):
		refers to Variable name
			otherwise
		refers to Property name
			otherwise
		refers to ModuleVariable name

	// global var ref
	GlobalVar(name):
		refers to ModuleVariable name
	
	// scope escape var ref
	ExternalScopeVar(name):
		refers to Property name
			otherwise
		refers to ModuleVariable name
	
	// function call (partial) * 3 
	ThisCall(name, args):
		refers to EntityFunction name of type FunctionSort(args-ty, _)
		where args has type args-ty 
			otherwise
		refers to ModuleFunction name of type FunctionSort(args-ty, _)
		where args has type args-ty 
	
	// PartialCall(name, args):
	// 	refers to ModuleFunction name of type FunctionSort(args-ty, _)
	// 	where args has type args-ty 
	
	Call(parent-expr, member-name, args):
		refers to EntityFunction member-name of type FunctionSort(args-ty, _) in Entity parent
		where parent-expr has type parent
		where args has type args-ty
			otherwise
		refers to TypeFunction member-name of type FunctionSort(args-ty, _) in Type parent
		where parent-expr has type parent
		where args has type args-ty
		
	Block(_):
		scopes Variable
	
	ForStmt(name, ty, _, _, block):
		defines Variable name of type ty in block
	
	ForStmtInferred(name, expr, _, block):
		defines Variable name of type ty in block
		where expr has type ty
	
	ForAllStmt(name, ty, _, block):
		defines Variable name of type ty in block
	
	ForCountStmt(name, _, _, block):
		defines Variable name of type SimpleSort("Int") in block
	
	ForExp(sexpr, name, ty, expr, filter):
		defines Variable name of type ty in sexpr, expr, filter

	FieldAccess(parent, member):
		refers to Property member in Entity parent-ty
		where parent has type parent-ty

binding rules // type declarations

	TypeDef(name, _):
		defines Type name
		scopes TypeFunction

	// TODO

binding rules // native classes

	// TODO

binding rules // HQL queries

	// HQL queries and HQL-WebDSL boundaries
	// 



	
	// TODO: These should be handled in their respective sub-languages
	 
	// validatetemplate
	// rendertemplate
	// sendemail, email, renderemail
	// goto page
	
	
	
	
	
	
	

