module WebDSL-Type

imports
  WebDSL-Lexical
  WebDSL-DataModel
	WebDSL-Action
	
exports

  context-free syntax
    Id         -> QId
    QId "." Id -> QId {cons("Qualified")}

  context-free syntax %% Types
		SimpleSort																		-> Sort
		GenericSort																		-> Sort
		RefSort																				-> Sort
		FunctionSort																	-> Sort
		
    Id																						-> SimpleSort			{"SimpleSort"}
    Id "<" Sort ">"																-> GenericSort		{"GenericSort"}
    "Ref" "<" Sort ">"														-> RefSort				{"RefSort"}
    "Ref" "<" Sort ">"														-> GenericSort		{reject}

    %% List type '[Type]' and Set type '{Type}' notation
    "[" Sort "]"																	-> GenericSort		{ast("GenericSort(\"List\",[<1>])")}
    "{" Sort "}"																	-> GenericSort		{ast("GenericSort(\"Set\",[<1>])")}

		"function" "(" {Sort ","}* ")" FunctionReturn	-> FunctionSort		{"FunctionSort"}

  context-free syntax
  
    %%  Construct for creating custom value types, and altering the existing value types.
    %%
    %%  example: 
    %%    type String { validate(this.length() <= 255 , "input too long (max 255 characters)") }
    %%    type USDate : Date { format = "MM/dd/yyyy" }
    %% 
    %%  Will also need to cope with input/output decode/encode.
    %%

    "type" Id TypeSuper "{" TypeProperty* "}" -> Definition {"TypeDef"}
    
    -> TypeSuper {"None"}
    ":" Sort -> TypeSuper {bracket}
    
    Annotation																		-> TypeProperty		{"TypeDefAnno"}
    
    NativeClassFunction														-> TypeProperty
    NativeQualifiedFunction												-> TypeProperty
    
    %%solve ambiguities
    "static"																			-> TypeProperty		{reject}
    
  context-free syntax %% properties
  
	Id ":" Sort -> TypeProperty {"TypeProperty"}
  
    