module generate-warnings

//imports Stratego

signature
  constructors
  	Module : ID * List(Def) -> Module
  	OpDecl : ID * Type -> OpDecl
  	FunType : List(Type) * Type -> Type
  	ConstType : Sort -> Type
  	SortNoArgs : ID -> Sort
  	Sort : ID * List(Sort) -> Sort

rules
	
	generate-name-warnings :
		Module(_, sig*) -> $[
			module name-warnings
			imports include/WebDSL
			signature
        constructors
  	      Def: URI -> Anno
  	      Use: URI -> Anno
      rules	
        has-name-binding-annotation =
        	where(?_{t*}; <oncetd(?Use(_) <+ ?Def(_))> t*)
			rules
				[code1*]
				[code2*]
		]
		where <collect(generate-name-warning)> sig* => code1*;
		      <collect(generate-type-warning)> sig* => code2*
		
  generate-name-warning :
  	OpDecl(cons, FunType(t*, t)) -> $[
  		constraint-warning:
  		  [cons]([tpat*]) -> (name, "name binding rule missing for this identifier")
  			where <not(has-name-binding-annotation)> name
  	]
  	where <oncetd(?ConstType(SortNoArgs("Id")))> t*;
  	      <map(\ConstType(SortNoArgs("Id")) -> "name"\ <+ !"_"); separate-by(|", ")> t* => tpat*
  	      

  generate-name-warning :
  	OpDecl(cons, FunType(t*, t)) -> $[
  		constraint-warning:
  		  [cons]([tpat*]) -> (name, "name binding rule missing for this identifier")
  			where <not(has-name-binding-annotation)> name
  	]
  	where <oncetd(?ConstType(Sort("Option", [SortNoArgs("Id")])))> t*;
  	      <map(\ConstType(Sort("Option", [SortNoArgs("Id")])) -> "Some(name)"\ <+ !"_"); separate-by(|", ")> t* => tpat*

  generate-type-warning :
  	OpDecl(cons, FunType(t*, ConstType(SortNoArgs("Exp")))) -> $[
  		constraint-warning:
  		  e@[cons]([tpat*]) -> (e, "type-of missing")
  			where <not(type-of)> e
  	]
  	where <map(!"_"); separate-by(|", ")> t* => tpat*  	     
  	
  	   	      