module trans/types

imports
	
	lib/editor-common.generated
	lib/task/core
	function/trans/function
	function/trans/types
	function/trans/types-overloading
	lib/nbl/-

signature

	constructors
		
		Type : Result -> Type
	
rules
	
	print-type = pp-webdsl-string

	// Gets the type task of the given term, or fails if the term has no type.
	get-type-task:
		t{anno*} -> <collect-one(?Type(<id>))> anno*

	// Gets the type of the given term, or fails if the term has no type.
	type-of:
		t -> type
		where
			result := <get-type-task> t;
			type   := <task-get-result; Hd> result

	type-task(|partition):
		t{a*} -> result
		where
			switch !t
				case is-list : where(<map(type-of-task(|partition))> t)
				otherwise    : !t{Type(<type-of-task(|partition)> t), a*}
			end => result
			
rules // Custom type equality
	
	nabl-property-eq(|type):
		(t1, t2) -> <id>
		where <?NablProp_signature()> type
		where signature-conformance-check
		
	nabl-property-eq(|type):
		(t1, t2) -> <id>
		where <?Type()> type
		where <?t1> t2
	    
  type-prop-eq:
  	(t1, t2) -> <?t1> t2
	    	
	nabl-disambiguate(|prop*, namespace, name) : 
		list -> result
		where <fetch(?Prop(NablProp_signature(),callsig,_))> prop* 
			; defsigs := <map(nabl-get-property(|NablProp_signature()));insert-results> list
			; sigresult := <signature-overload-resolve> (callsig, defsigs)
			; if <?None()> sigresult
			  then result := [] // for now, indicate ambiguity with generic unresolved error
			  else index := <get-index> (sigresult, defsigs)
			     ; result := [<index(|index)> list] end
