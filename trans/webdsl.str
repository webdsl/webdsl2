module trans/webdsl

imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  libstratego-parallel
  include/WebDSL
  lib/editor-common.generated
  lib/index-library.generated
  lib/nbl/-
  lib/index/partition
  lib/index/query
  
  names
  types
  check
  desugar
  
	
rules // Analysis
	rules // Analysis
  
	// Main entry point for analyzes, called when a single file is opened in the editor.
  editor-analyze:
    (ast, path, project-path) -> (ast', [error*, type-error*], warnings, notes)
    with
      editor-init;
      (ast', entries, tasks, dependent) := <origin-track-forced(desugar-all); nabl-analyze(|<language>, path, project-path)> ast;
      <filter(type-error)> tasks => type-error* ;
      (error*, warnings, notes)         := <analyze-markers> ast';
      <map(vdebug(!"Entry: "))> entries;
      <map(vdebug(!"Tasks: "))> tasks;
      <map(vdebug(!"Dependent: "))> dependent;
      <queue-analyze-multiple> <map(index-partition-file)> dependent

  editor-analyze:
    path* -> result*
    where
      not(is-tuple)
    with
      full-path* := <map(\p -> $[[<project-path>]/[p]]\)> path*;
      result*    := <analyze-multiple; debug(!"Results: ")> full-path*
      //queue-analyze-multiple
      
  editor-save:
  	(_, _, _, path, project-path) -> None()
  	with
  		index-setup(|<language>, [project-path], $[[project-path]/[path]]);
  		index-commit

  analyze-markers:
    ast -> (errors, warnings, notes)
    with
      index-transaction(
        errors   := <collect-all(constraint-error, conc)> ast;
        warnings := <collect-all(constraint-warning, conc)> ast;
        notes    := <collect-all(constraint-note, conc)> ast
      )

  update-markers:
    Result(partition, initial-ast, analyzed-ast, old-entry*, new-entry*, evaluated-task*, error-task*, dependent-partition*, _, _, _) -> Result(partition, initial-ast, analyzed-ast, old-entry*, new-entry*, evaluated-task*, error-task*, dependent-partition*, errors, warnings, notes)
    where
      not(() := initial-ast)
    with
      (errors, warnings, notes) := <analyze-markers> analyzed-ast;
      <set-markers(|initial-ast)> (analyzed-ast, errors, warnings, notes)

  queue-analyze-multiple:
    path* -> None()
    with
      if not([] := path*) then
        queue-strategy(|"analyze-multiple", "Analyzing files")
      end
  
  sunshine-parse-file = prim("SSL_EXT_parse_file")
  
  analyze-multiple:
    path* -> result*
    with
      nabl-analyze-multiple-work-units; set-total-work-units;
      measure-time(
        result* := <nabl-analyze-multiple(sunshine-parse-file; desugar-all, parallel-unordered, complete-work-unit|<language>, <project-path>); 
          filter(update-markers)> path*
      , vdebug(!"Analysis seconds: ")
      );
      measure-time(
      	measure-time(
	      	where(index-commit)
	      	,vdebug(!"\tCommitting seconds: ")
	      );
	      measure-time(
		      mapconcat(nabl-result-dependent)     	
	      	,vdebug(!"\tDependencies seconds: ")
	      );
	      measure-time(
		      map(index-partition-file)
	      	,vdebug(!"\tPartitioning seconds: ")
	      );
	      measure-time(
		      make-set
	      	,vdebug(!"\tJoining seconds: ")
	      );
	      measure-time(
		      queue-analyze-multiple
	      	,vdebug(!"\tQueueing seconds: ")
	      )
	    , vdebug(!"Post-processing seconds: ")
	    ) 
      
  measure-time(s, log) =
    where(before := <times>);
    s;
    where(after := <times>; !(after, before); diff-times; times-to-seconds; Fst; log)
      
rules // Editor services

  editor-resolve:
    (node, position, ast, path, project-path) -> definition
    where
    	index-setup(|<language>, [project-path], $[[project-path]/[path]]);
    	<nabl-has-reference> node;
    	definition := <nabl-resolve-collect-one> node

  editor-hover:
    (target, position, ast, path, project-path) -> $[Type: [<print-type> type]]
    where
      type := <type-of; print-type> target

  editor-complete:
    (node, position, ast, path, project-path) -> proposals
    where
     proposals := <nabl-propose-completions> ast

rules // Debugging
  
  // Prints the abstract syntax ATerm of a selection.
  debug-generate-aterm:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path;
      result   := <desugar-all> selected;
      <queue-analysis> $[[project-path]/[path]]
      
  // Prints the analyzed annotated abstract syntax ATerm of a selection.
  debug-generate-analyzed:
    (selected, position, ast, path, project-path) -> (filename, selected)
    with
      filename := <guarantee-extension(|"analyzed.aterm")> path

rules // NBL debugging
     
  debug-show-current-partition = 
  	nabl-debug-show-current-partition(|<language>)
    
  debug-show-all-partitions =
    nabl-debug-show-all-partitions(|<language>)

  debug-clear-current =
    nabl-debug-clear-current(|<language>)
    
  debug-clear-all =
    nabl-debug-clear-all(|<language>)  

  debug-reload = 
  	nabl-debug-reload(|<language>)

  debug-show-current-partition-pp:
  	(_, _, _, path, project-path) -> (filename, result)
    with
      index-setup(|<language>, [project-path], $[[project-path]/[path]]);
      filename := <guarantee-extension(|"index.currentpartition.ind")> path;
      entries  := <index-get-all-in-partition> path;
      result	 := <call-index-rule(|"from-index");call-index-rule(|"pp-index-string")> (filename, entries)
  
   debug-show-all-partitions-pp:
    (_, _, _, path, project-path) -> (filename, result)
    with
      index-setup(|<language>, [project-path], $[[project-path]/[path]]);
      filename := <guarantee-extension(|"index.allfiles.ind")> path;
      entries  := <index-get-all-partitions; map(\filename -> ( <Fst> filename, <index-get-all-in-partition> filename)\)>;
      result   := <call-index-rule(|"from-index");call-index-rule(|"pp-index-string")> entries
  
  call-index-rule(|s) = prim("SSL_EXT_foreigncall", "Index", s)
  
  
  	// nabl-debug-show-current-partition(|<language>);debug(!"oooo ")