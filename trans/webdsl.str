module trans/webdsl

imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  include/WebDSL
  lib/editor-common.generated
  lib/analysis/-
  lib/nbl/-
  lib/task/-
  lib/index/-
  
  names
  types
  check
  desugar
  metrics
  generate-warnings
  //name-warnings
  
rules // Analysis
  
	// Main entry point for analyzes, called when a single file is opened in the editor.
  editor-analyze:
    (ast, path, project-path) -> (ast', error*, warning*, note*)
    with
      editor-init;
      <debug(!"Analyzing file: ")> path;
      (ast', unevaluated-task*, evaluated-count, (analyze-error*, analyze-warning*, analyze-note*)) := <desugar-all; analyze-one(|<language>, path, project-path)> ast;
      (error*, warning*, note*) := <editor-analyze-markers(|analyze-error*, analyze-warning*, analyze-note*)> ast';
      <debug> $[[evaluated-count] task evaluated, [<length> unevaluated-task*] task unevaluated.]
      // TODO: Update markers for partitions that have had a task executed.

  /*editor-analyze:
    path* -> result*
    where
      not(is-tuple)
    with
    	debug(!"Bla ");
    	measure-time(
	      full-path* := <map(\p -> $[[<project-path>]/[p]]\)> path*;
	      result*    := <editor-analyze-multiple> full-path*,
	      id | "webdsl-analyze-total"
	    )
  */
  
  editor-analyze:
    path* -> None()
    where
      not(is-tuple)
    with
      map(\p -> $[[<project-path>]/[p]]\);
      editor-queue-analyze-multiple

  editor-queue-analyze-multiple:
    path* -> None()
    with
      if not([] := path*) then
        queue-strategy(|"editor-analyze-multiple", "Analyzing files")
      end
      
  editor-save:
  	(_, _, _, path, project-path) -> None()
  	with
  		index-setup(|<language>, [project-path], $[[project-path]/[path]]);
  		index-commit

  editor-analyze-markers(|analyze-error*, analyze-warning*, analyze-note*):
    ast -> ([<map(pp-type-message)> analyze-error*, error*], [<map(pp-type-message)> analyze-warning*, warning*], 
    	[<map(pp-type-message)> analyze-note*, note*])
    with
      error*   := <collect-all(constraint-error, conc)> ast;
      warning* := <collect-all(constraint-warning, conc)> ast;
      note*    := <collect-all(constraint-note, conc)> ast

  editor-update-markers:
    Result(partition, initial-ast, analyzed-ast, changed-read*, error*, warning*, note*) -> 
    Result(partition, initial-ast, analyzed-ast, changed-read*, error'*, warnings'*, notes'*)
    where
      not(() := initial-ast)
    with
      (error'*, warnings'*, notes'*) := <editor-analyze-markers(|error*, warning*, note*)> analyzed-ast;
      <set-markers(|initial-ast)> (analyzed-ast, error'*, warnings'*, notes'*)

  sunshine-parse-file = prim("SSL_EXT_parse_file")
  
  editor-analyze-multiple:
    path* -> (result'*, unevaluated-task*, evaluated-count)
    with
    	debug(!"Analyzing files: ");
      nabl-analyze-multiple-work-units; set-total-work-units;
      measure-time(
        (result*, unevaluated-task*, evaluated-count) := <analyze-multiple(parse-file; desugar-all <+ !(), 
        	complete-work-unit|<language>, <project-path>)> path*;
        result'* := <filter(editor-update-markers)> result*
      , id | "webdsl-analyze-multiple-full-analysis"
      );
    	measure-time(
	      index-commit
      	, id | "webdsl-analyze-multiple-index-commit"
      );
    	measure-time(
	      task-persist
      	, id | "webdsl-analyze-multiple-task-commit"
      );
      <debug> $[[evaluated-count] task evaluated, [<length> unevaluated-task*] task unevaluated.]
  
rules // Editor services

  editor-resolve:
    (node, position, ast, path, project-path) -> definition
    where
    	task-setup(|project-path);
    	index-setup(|<language>, [project-path], $[[project-path]/[path]]);
    	<nabl-has-reference> node;
    	definition := <nabl-collect-one-resolved-def; index-get-all; Hd> node

  editor-hover:
    (target, position, ast, path, project-path) -> $[Type: [<type-of; print-type> target]]

  editor-complete:
    (node, position, ast, path, project-path) -> <nabl-propose-completions> ast

rules // Debugging
  
  // Prints the abstract syntax ATerm of a selection.
  debug-generate-aterm:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path;
      result   := <desugar-all> selected;
      <queue-analysis> $[[project-path]/[path]]
      
  // Prints the analyzed annotated abstract syntax ATerm of a selection.
  debug-generate-analyzed:
    (selected, position, ast, path, project-path) -> (filename, selected)
    with
      filename := <guarantee-extension(|"analyzed.aterm")> path
      
  debug-generate-name-warnings:
    (selected, position, ast, path, project-path) -> (filename, code)
    with
    	<debug(!"debug-generate-name-warnings a: ")> project-path;
    	sig := <ReadFromFile> $[[project-path]/include/WebDSL.aterm];
    	<debug(!"debug-generate-name-warnings b: ")> sig;
    	code := <generate-name-warnings> sig;
    	<debug(!"debug-generate-name-warnings c: ")> code;
      filename := <guarantee-extension(|"str")> $[[project-path]/trans/name-warnings.str]

rules // NBL debugging
     
  debug-show-current-partition =
    analysis-debug-show-current-partition(|<language>)
     
  debug-show-all-partitions =
    analysis-debug-show-all-partitions(|<language>)

  debug-show-tasks =
  	analysis-debug-show-tasks(|<language>)

  debug-reset-index =
    analysis-debug-reset-index(|<language>)
    
  debug-reset-task =
  	analysis-debug-reset-task(|<language>)
  	
  debug-reanalyze = 
  	analysis-debug-reanalyze(|<language>)

  debug-show-current-partition-pp:
  	(_, _, _, path, project-path) -> (filename, result)
    with
      index-setup(|<language>, [project-path], $[[project-path]/[path]]);
      filename := <guarantee-extension(|"index.currentpartition.ind")> path;
      entries  := <index-get-all-in-partition> path;
      result	 := <call-index-rule(|"from-index");call-index-rule(|"pp-index-string")> (filename, entries)
  
   debug-show-all-partitions-pp:
    (_, _, _, path, project-path) -> (filename, result)
    with
      index-setup(|<language>, [project-path], $[[project-path]/[path]]);
      filename := <guarantee-extension(|"index.allfiles.ind")> path;
      entries  := <index-get-all-partitions; map(\filename -> ( <Fst> filename, <index-get-all-in-partition> filename)\)>;
      result   := <call-index-rule(|"from-index");call-index-rule(|"pp-index-string")> entries
  
  call-index-rule(|s) = prim("SSL_EXT_foreigncall", "Index", s)
