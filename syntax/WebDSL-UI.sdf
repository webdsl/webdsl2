module WebDSL-UI

imports
  WebDSL-Action
  WebDSL-Lexical

exports

  sorts TemplateDefinition Modifier Exp

  context-free syntax

    "define" -> Keyword
  %%"action" -> Keyword
    "for"    -> Keyword

  %% Kernel syntax is required here since we do not want LAYOUT to be parsed between
  %% the first QMLex and StringLex
  syntax
      <QMLex-LEX> <StringLex-LEX> <QMLex-LEX>    -> <TemplateElement-CF> {ast("Text(<2>)")}


  context-free syntax

    TemplateDefinition -> Definition

    "define" Modifier*
       Id "(" {FormalArg ","}* ")"
       TemplateArgs
       "{" TemplateElement* "}"             -> TemplateDefinition {cons("Define")}

    "requires" {TemplateArg "," }*            -> TemplateArgs{cons("TemplateArgs"), prefer}
    Id "(" {Sort ","}* ")"                  -> TemplateArg {cons("TemplateArg")}

      -> TemplateArgs{cons("None")}

    "define" Modifier* Id "(" {FormalArg ","}* ")" "=" Id OptLocalRedefineArgs -> TemplateDefinition {cons("LocalRedefine")}
    -> OptLocalRedefineArgs {cons("None")}
    "(" "*" "," {LocalRedefineArg ","}+ ")" -> OptLocalRedefineArgs {cons("LocalRedefineArgs")}
    Id -> LocalRedefineArg{cons("Var")}

    %% new page syntax
    Modifier* "page"
       Id "(" {FormalArg ","}* ")"
       TemplateArgs
       "{" TemplateElement* "}"             -> TemplateDefinition {cons("DefinePage")}
    %% new template syntax
     Modifier* "template"
       Id "(" {FormalArg ","}* ")"
       TemplateArgs
       "{" TemplateElement* "}"             -> TemplateDefinition {cons("DefineTemplate")}

    %%"define" Modifier*
    %%   Id UNDEFINED*
    %%   "{" TemplateElement* "}"             -> TemplateDefinition {cons("Define")}

    "page"                                  -> Modifier {cons("Page")}
    "email"                                 -> Modifier {cons("Email")}
    "ajax"                                  -> Modifier {cons("AjaxTemplate")}
    "template"                              -> Modifier {cons("Template")}
    "feed"                                  -> Modifier {cons("Feed")}
    "local"                                 -> Modifier {cons("Local")}
    "no-span"                                                -> Modifier {cons("NoSpan")}
    "span"                                                  -> Modifier {cons("TemplateModSpan")}
    "inline"                                                -> Modifier {cons("TemplateModInline")}
    "secure"                                   -> Modifier {cons("TempateModSecure")}
    "not-secure"                              -> Modifier {cons("TemplateModNotSecure")}
    "override"                                -> Modifier {cons("TemplateModOverride")}
    "deprecated"                              -> Modifier {cons("TemplateDeprecated")}

    InitAction                              -> TemplateElement
    Action                                  -> TemplateElement

    "var" Id ":" Sort                           -> VarDecl {cons("VarDecl")}
    "var" Id ":" Sort ":=" Exp              -> VarDecl {cons("VarDeclInit")}
    "var" Id ":=" Exp                       -> VarDecl {cons("VarDeclInitInferred")}
    VarDecl                                 -> TemplateElement
    %% still allow ";" behind page var for backwards comp., remove VarDeclStat-> TemplateElement to disallow
    VarDeclStat                             -> TemplateElement
    "request" VarDecl                       -> TemplateElement {cons("RequestScopeTemplate")}
    "request"                               -> TemplateCallId {reject} %% reject TemplateCallNoArgs("request")
    "local" VarDecl                         -> TemplateElement {cons("LocalScopeTemplate")}
    "local"                                 -> TemplateCallId {reject} %% reject TemplateCallNoArgs("local")

    TemplateDefinition                      -> TemplateElement
    TemplateCall                            -> TemplateElement {avoid}


    "where" Exp                              -> Filter {cons("FilterNoOrderByNoLimit")}
    "order" "by" OrderExp                    -> Filter {cons("FilterNoWhereNoLimit")}
    "where" Exp "order" "by" OrderExp        -> Filter {cons("FilterNoLimit")}
    "where" Exp Limit                        -> Filter {cons("FilterNoOrderBy")}
    "order" "by" OrderExp Limit              -> Filter {cons("FilterNoWhere")}
    Limit                                    -> Filter {cons("FilterNoWhereNoOrderBy")}
    "where" Exp "order" "by" OrderExp Limit  -> Filter {cons("Filter")}
    Exp                                      -> OrderExp {cons("OrderNonSpecific")}
    Exp "asc"                                -> OrderExp {cons("OrderAscending")}
    Exp "desc"                               -> OrderExp {cons("OrderDescending")}
    "limit" Exp "offset" Exp                 -> Limit {cons("Limit")}
    "limit" Exp                              -> Limit {cons("LimitNoOffset")}
    "offset" Exp                             -> Limit {cons("LimitNoLimit")}


    "for" "(" Id ":" Sort "in" Exp OptFilter ")"
       "{" TemplateElement* "}" ForSeparator       -> TemplateElement {cons("For")}

    Filter -> OptFilter
    -> OptFilter{cons("None")}

    "for" "(" Id "in" Exp OptFilter ")"
       "{" TemplateElement* "}" ForSeparator       -> TemplateElement {cons("ForInferred")}

    "for" "(" Id ":" Sort OptFilter ")"
       "{" TemplateElement* "}" ForSeparator       -> TemplateElement {cons("ForAll")}

    "for" "(" Id ":" "Int" "from" Exp "to" Exp ")"
      "{" TemplateElement* "}" ForSeparator        -> TemplateElement {cons("ForCount")}

    "separated-by" "{" TemplateElement* "}" -> ForSeparator{cons("ForSeparator")}
    -> ForSeparator{cons("None")}

    %%

    "select" "(" Exp "from" Exp ")" -> TemplateElement {cons("SelectFromListNoPropsNoElems")}
    "select" "(" Exp "from" Exp ")" "[" {PropertyAssignment ","}* "]" -> TemplateElement {cons("SelectFromListNoElems")}
    "select" "(" Exp "from" Exp ")" "[" {PropertyAssignment ","}* "]" "{" TemplateElement* "}" -> TemplateElement {cons("SelectFromList")}
    "select" "(" Exp "from" Exp ")" "{" TemplateElement* "}" -> TemplateElement {cons("SelectFromListNoProps")}

    "if" "(" Exp ")" "{" TemplateElement* "}" "else" "{" TemplateElement* "}" -> TemplateElement {cons("IfTempl"),prefer}
    "if" "(" Exp ")" "{" TemplateElement* "}"                                 -> TemplateElement {cons("IfNoElseTempl")}


    "if" "(" Exp ")" "{" TemplateElement* "}" ElseIfTempl+ ElseTempl? -> TemplateElement {cons("IfElseIfTempl"),prefer}
    "else" "if" "(" Exp ")" "{" TemplateElement* "}"                  -> ElseIfTempl {cons("ElseIfTempl"),prefer}
    "else" "{" TemplateElement* "}"                                   -> ElseTempl  {cons("ElseTempl"),prefer}


    "case" "(" {Exp ","}* ")" "{" TemplateCaseAlt* "}"     -> TemplateElement {cons("TemplateCase")}
    {ConstValue ","}* "{" TemplateElement* "}"          -> TemplateCaseAlt {cons("TemplateCaseAlt")}
    "default"  "{" TemplateElement* "}"                 -> TemplateCaseAlt {cons("TemplateCaseAltDefault")}

  %%
    TemplateCallId "(" {Exp ","}* ")" "[" {PropertyAssignment ","}*"]" TemplateBody -> TemplateCall {cons("TemplateCall")}

    TemplateCallNoArgs -> TemplateCall
    TemplateCallNoBody -> TemplateCall
    TemplateCallNoAssigns -> TemplateCall
    TemplateCallPropsNoBody -> TemplateCall
    TemplateCallProps -> TemplateCall
    TemplateCallPropsNoArgs -> TemplateCall
    TemplateCallBody -> TemplateCall
    TemplateCallId                                             -> TemplateCallNoArgs {cons("TemplateCallNoArgs")}
    TemplateCallId "(" {Exp ","}* ")"                          -> TemplateCallNoBody {cons("TemplateCallNoBody")}
    TemplateCallId "(" {Exp ","}* ")" TemplateBody -> TemplateCallNoAssigns {cons("TemplateCallNoAssigns")}
    TemplateCallId "(" {Exp ","}* ")" "[" {PropertyAssignment ","}*"]" -> TemplateCallPropsNoBody {cons("TemplateCallPropsNoBody")}
    TemplateCallId "[" {PropertyAssignment ","}*"]" -> TemplateCallProps {cons("TemplateCallProps")}
    TemplateCallId "[" {PropertyAssignment ","}*"]" TemplateBody -> TemplateCallPropsNoArgs {cons("TemplateCallPropsNoArgs")}
    TemplateCallId  TemplateBody -> TemplateCallBody {cons("TemplateCallBody")}

    "{" TemplateElement* "}" -> TemplateBody {cons("TemplateBody")}
    "with" "{" ArgDefine* "}" -> TemplateBody {cons("TemplateWith")}
    TemplateCallId "(" {FormalArg ","}* ")"
      "{" TemplateElement* "}" -> ArgDefine {cons("ArgDefine")}

    "with" "{" TemplateElement* "}"                -> TemplateCall {reject}

    %%disambiguate
    "define"                        -> TemplateCallId {reject}
    "template"                      -> TemplateCallId {reject}
    "for"                        -> TemplateCallId {reject}
    "placeholder"                        -> TemplateCallId {reject}

  %%

    %% deprecated
    "navigate" "(" PageCall ")" UNDEFINED* "{" TemplateElement* "}" -> TemplateElement {cons("NavigateCall"), prefer}
    "navigate" "(" PageCall ")" "[" {PropertyAssignment ","}* "]" "{" TemplateElement* "}" -> TemplateElement {cons("NavigateCall"), prefer}

    "navigate" PageCall UNDEFINED* "{" TemplateElement* "}" -> TemplateElement {cons("NavigateCall"), prefer}
    "navigate" PageCall "[" {PropertyAssignment ","}* "]" "{" TemplateElement* "}" -> TemplateElement {cons("NavigateCall"), prefer}

    Id "(" {Exp ","}* ")"  -> PageCall {cons("PageCall")}

    %%disambiguate
    "navigate" -> TemplateCallId {reject}

  %%

    %% deprecated
    "action" "(" Exp "," ActionCallOrInline ")" UNDEFINED* -> TemplateElement {cons("Submit"), prefer}
    "action" "(" Exp "," ActionCallOrInline ")" "[" {PropertyAssignment ","}* "]" -> TemplateElement {cons("Submit"), prefer}
    "actionLink" "(" Exp "," ActionCallOrInline ")" UNDEFINED* -> TemplateElement {cons("SubmitLink"), prefer}
    "actionLink" "(" Exp "," ActionCallOrInline ")" "[" {PropertyAssignment ","}* "]" -> TemplateElement {cons("SubmitLink"), prefer}

    "submit" "(" Exp "," ActionCallOrInline ")" UNDEFINED* -> TemplateElement {cons("Submit"), prefer}
    "submit" "(" Exp "," ActionCallOrInline ")" "[" {PropertyAssignment ","}* "]" -> TemplateElement {cons("Submit"), prefer}
    "submitlink" "(" Exp "," ActionCallOrInline ")" UNDEFINED* -> TemplateElement {cons("SubmitLink"), prefer}
    "submitlink" "(" Exp "," ActionCallOrInline ")" "[" {PropertyAssignment ","}* "]" -> TemplateElement {cons("SubmitLink"), prefer}

    "submit"     ActionCallOrInline UNDEFINED*                        "{" TemplateElement* "}" -> TemplateElement {cons("SubmitElem"), prefer}
    "submit"     ActionCallOrInline "[" {PropertyAssignment ","}* "]" "{" TemplateElement* "}" -> TemplateElement {cons("SubmitElem"), prefer}
    "submitlink" ActionCallOrInline UNDEFINED*                        "{" TemplateElement* "}" -> TemplateElement {cons("SubmitLinkElem"), prefer}
    "submitlink" ActionCallOrInline "[" {PropertyAssignment ","}* "]" "{" TemplateElement* "}" -> TemplateElement {cons("SubmitLinkElem"), prefer}

    "downloadlink" ActionCallOrInline UNDEFINED*                        "{" TemplateElement* "}" -> TemplateElement {cons("DownloadLink"), prefer}
    "downloadlink" ActionCallOrInline "[" {PropertyAssignment ","}* "]" "{" TemplateElement* "}" -> TemplateElement {cons("DownloadLink"), prefer}
    "outputimage" ActionCallOrInline UNDEFINED*                        "{" TemplateElement* "}" -> TemplateElement {cons("OutputImage"), prefer}
    "outputimage" ActionCallOrInline "[" {PropertyAssignment ","}* "]" "{" TemplateElement* "}" -> TemplateElement {cons("OutputImage"), prefer}

    ActionCall -> ActionCallOrInline
    InlineAction -> ActionCallOrInline

    Id "(" {Exp ","}* ")"  -> ActionCall {cons("ActionCall")}

    %%disambiguate
    "action"                       -> TemplateCallId {reject}
    "actionLink"                   -> TemplateCallId {reject}
    "submit"                       -> TemplateCallId {reject}
    "submitlink"                   -> TemplateCallId {reject}
    "downloadlink"                 -> TemplateCallId {reject}
    "outputimage"                  -> TemplateCallId {reject}
  %%

    "action" Block -> InlineAction {cons("InlineAction")}
    %% reject ambiguous ObjectCreation(SimpleSort("action"), [])
    "action" -> Sort {reject}
    %%"template" "{" TemplateElement* "}" -> InlineTemplate {cons("InlineTemplateCall")}
    %% "template"               -> Id {reject}

    %% Template call without braces must be disambiguated in some cases
    "action" -> TemplateCall {reject}  %%this is an action definiton, not a templatecall without params
    "action" -> Exp {reject}           %%this is an inline action, not a variable
    "action" -> PropertyValue {reject} %%this is an inline action, not an id

  %%

    %% preferably have the symbol options in one production, unfortunately then it ends up in ast, can use ast instead of cons...
    %% SubmitProp PropertyAssignSymbol ActionCallOrInline -> PropertyAssignment {ast("PropertySubmit(<1>,<3>)"),prefer}
    %% however, in this case the constructors are not automatically generated for stratego
    %%
%%  lexical syntax %% different opinions about nice syntax here, something to discuss (leaning towards "=")
%%    ":"  -> PropertyAssignSymbol %% same as type declaration
%%    ":=" -> PropertyAssignSymbol %% same as assignment
%%    "="  -> PropertyAssignSymbol %% same as html and data model property annotations
    SubmitProp ":" ActionCallOrInline  -> PropertyAssignment {cons("PropertySubmit"),prefer}
    SubmitProp ":=" ActionCallOrInline -> PropertyAssignment {cons("PropertySubmit"),prefer}
    SubmitProp "=" ActionCallOrInline  -> PropertyAssignment {cons("PropertySubmit"),prefer}
    ExtendedId ":" PropertyValue            -> PropertyAssignment {cons("PropertyAssignment")}
    ExtendedId ":=" PropertyValue           -> PropertyAssignment {cons("PropertyAssignment")}
    ExtendedId "=" PropertyValue            -> PropertyAssignment {cons("PropertyAssignment")}
    Exp                                            -> PropertyValue
    "ajax"                                         -> PropertyAssignment {cons("TemplateCallPropertyAjax"),prefer}
    "secure"                                       -> PropertyAssignment {cons("TemplateCallPropertySecure"),prefer} %% for navigates and submits
    "ignore-validation"                            -> PropertyAssignment {cons("TemplateCallPropertyIgnoreValidation"),prefer}
    "not-secure"                                   -> PropertyAssignment {cons("TemplateCallPropertyNotSecure"),prefer} %% for navigates and submits
    "not null"                                     -> PropertyAssignment {cons("TemplateCallPropertyNotNull"),prefer}
    CommonAttribute -> PropertyAssignment


  lexical syntax
    "onabort" -> SubmitProp
    "onblur"  -> SubmitProp
    "onchange"  -> SubmitProp
    "onclick"  -> SubmitProp
    "ondblclick" -> SubmitProp

    "onerror"  -> SubmitProp
    "onfocus"  -> SubmitProp
    "onkeydown"  -> SubmitProp
    "onkeypress" -> SubmitProp
    "onkeyup" -> SubmitProp

    "onload" -> SubmitProp
    "onmousedown" -> SubmitProp
    "onmousemove" -> SubmitProp
    "onmouseout" -> SubmitProp
    "onmouseover" -> SubmitProp

    "onmouseup" -> SubmitProp
    "onreset" -> SubmitProp
    "onresize" -> SubmitProp
    "onselect" -> SubmitProp
    "onsubmit" -> SubmitProp

    "onunload" -> SubmitProp

  context-free syntax
  %%

    "if" "(" Exp ")" "{" TemplateElement* "}"      -> TemplateCall {reject}
    "else" "{" TemplateElement* "}"                -> TemplateCall {reject}
    "separated-by" "{" TemplateElement* "}"        -> TemplateCall {reject}

    "init" Block          -> InitAction {cons("InitAction"),prefer}
    "init"              -> TemplateCallId {reject}
    "databind" Block    -> TemplateElement {cons("DataBindAction"),prefer}
    "databind"          -> TemplateCallId {reject}
    "render" Block    -> TemplateElement {cons("RenderAction"),prefer}
    "validate" Block    -> TemplateElement {cons("ValidateAction"),prefer}

    "action" ActionModifier* Id "(" {FormalArg ","}* ")" Block -> Action {cons("Action")}
    "ignore-validation" -> ActionModifier{cons("ActionModifierIgnoreValidation")}

  context-free syntax

    Id ".elements" -> TemplateCallId {cons("QualifiedElementsCall"),prefer}
